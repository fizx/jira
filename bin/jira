#!/usr/bin/env ruby
require "rubygems"
require "plain_option_parser"
require "highline/import"
require "jira4r"
require "yaml"

$config_file = File.join(ENV["HOME"], ".jira.yml")
$config = File.exists?($config_file) ? YAML.load(File.open($config_file)) : {}

def input(prompt, key, default = nil, &validation)
  key = key.to_s
  @original = $config[key]
  input = ask("#{prompt} [#{$config[key] || default}]")
  $config[key] = input unless input.empty? 
  $config[key] ||= default
  validation.call if validation
  save $config
rescue
  $config[key] = @original
  raise
end

def save
  File.open($config_file, "w") do |f|
    YAML.dump($config, f)
  end
end

def password
  password = ask("Enter password: ") { |q| q.echo = false }
  init
  $config["token"] = $jira.login($config["user"], password)
  save
  login
end

def init
  $jira = Jira4R::JiraTool.new(2, $config["location"])
  logger = Logger.new(STDERR)
  logger.level = Logger::WARN
  $jira.logger = logger
end

def login
  init
  $jira.instance_variable_set("@token", $config["token"])
end

def create_ticket(summary, description, user, group, component, reviewboard = nil, git_repo = nil, branch = nil)
  issue = Jira4R::V2::RemoteIssue.new
  issue.summary = summary
  issue.description = description
  issue.type = 2
  issue.assignee = user
  issue.reporter = user
  issue.project = group
  
  issue.components = $jira.getComponents(group).select{|c| c.name == component }
  
  issue.customFieldValues = []
  if reviewboard
    # reviewboard custom field
    rb = Jira4R::V2::RemoteCustomFieldValue.new
    rb.customfieldId = "customfield_10000"
    rb.values = reviewboard
    issue.customFieldValues << rb
  end
  
  if branch
    # branch custom field
    b = Jira4R::V2::RemoteCustomFieldValue.new
    b.customfieldId = "customfield_10022"
    b.values = branch
    issue.customFieldValues << b
  end
  
  if git_repo
    # 'git repository' custom field
    gr = Jira4R::V2::RemoteCustomFieldValue.new
    gr.customfieldId = "customfield_10052"
    gr.values = git_repo
    issue.customFieldValues << gr
  end
    
  puts issue.inspect
  
  issue = $jira.createIssue(issue)
rescue SOAP::FaultError => e
  if e.message =~ /auth/
    password
    retry
  else
    raise
  end
end

PlainOptionParser.new do
  desc "Setup your global JIRA settings"
  cmd "setup" do 
    input "JIRA location", :location
    input "JIRA user", :user, ENV["USER"]
    password
  end  
  
  desc "Make a context"
  cmd "configure" do
    login
    begin
      input "Project", :project do
        $project = $jira.getProjectByKey($config["project"])
      end
    rescue
      puts "Invalid project name!"
      retry
    end
    
    begin
      input "Component", :component do
        $jira.getComponents($config["project"]).any?{|c| c.name == $config["component"]} or raise
      end
    rescue
      puts "Invalid component name!"
      retry
    end
  end
  
  # summary, description, reviewboard, git_repo, branch, user, group
  
  cmd "new feature" do
    login
    title = ask("Title")
    description = ask("Description")
    create_ticket(title, description, $config["user"], $config["project"], $config["component"])
    # (summary, description, user, group, reviewboard = nil, git_repo = nil, branch = nil)
  end
  
end.start(ARGV)
